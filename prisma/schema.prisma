// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model BlogPost {
  id                   Int       @id @default(autoincrement())
  name                 String
  slug                 String
  collectionId         String
  localeId             String
  itemId               String    @unique
  archived             Boolean   @default(false)
  draft                Boolean   @default(false)
  createdOn            DateTime?
  updatedOn            DateTime?
  publishedOn          DateTime?
  metaDescription      String?
  featuredImage        String?
  date                 DateTime?
  description          String?
  authorName           String?
  categories           String?
  categoriesPlainText  String?
  featuredCategory     String?
  content              String?
  isFeatured           Boolean   @default(false)
  highlightedBlog      Boolean   @default(false)
  readTime             String?

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  linksFrom            SemanticLink[] @relation("SourcePost")
  linksTo              SemanticLink[] @relation("TargetPost")
  analysisJobs         AnalysisJob[]

  @@index([slug])
  @@index([date])
  @@index([authorName])
}

model SemanticLink {
  id                   String    @id @default(cuid())
  sourcePostId         Int
  targetPostId         Int
  linkText             String
  linkPosition         Int
  altText              String
  confidence           Float
  status               String    @default("pending") // pending, approved, rejected
  reasoning            String
  createdAt            DateTime  @default(now())
  reviewedAt           DateTime?
  reviewedBy           String?

  // Relations
  sourcePost           BlogPost  @relation("SourcePost", fields: [sourcePostId], references: [id])
  targetPost           BlogPost  @relation("TargetPost", fields: [targetPostId], references: [id])

  @@index([sourcePostId])
  @@index([targetPostId])
  @@index([status])
  @@unique([sourcePostId, targetPostId, linkText, linkPosition])
}

model AnalysisJob {
  id                   String    @id @default(cuid())
  postId               Int
  status               String    @default("queued") // queued, processing, completed, failed
  progress             Float     @default(0)
  startedAt            DateTime?
  completedAt          DateTime?
  error                String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  post                 BlogPost  @relation(fields: [postId], references: [id])

  @@index([status])
  @@index([postId])
}